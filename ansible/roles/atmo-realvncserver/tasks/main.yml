---
# tasks to install RealVNC server on non-headless instances

- name: set environment variables for legacy systems
  set_fact: ansible_python_interpreter=/usr/bin/python
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version < '6'

- name: gather os specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution }}-{{ ansible_distribution_major_version}}.yml"
    - "{{ ansible_distribution }}.yml"

# CHECK FOR GUI
- name: Verify that X server exists
  stat:
    path: '{{ XGUI.xsession_path }}'
  register: xsession

- name: Verify that xterm session exists
  stat:
    path: '{{ XGUI.xterm_path }}'
  register: xterm

- name: Set flag for GUI systems
  set_fact:
    has_gui: '{{ xsession.stat.exists and xterm.stat.exists }}'

- fail:
    msg: "Instance has no GUI"
  when: has_gui == false

# Perform install/config if NOT headless
- name: create needed directories
  file:
    path: '{{ item.PATH }}'
    state: '{{ item.STATE }}'
    mode: '{{ item.MODE }}'
  with_items: '{{ XGUI.dirs_to_make }}'

- name: Create .vnc directory in user's home_dir
  file:
    path: '/home/{{ ATMOUSERNAME }}/.vnc'
    state: directory
    mode: 0750
    owner: '{{ ATMOUSERNAME }}'

- name: install the dependencies for vncserver
  package:
    name: '{{ item }}'
    state: present
  with_items: '{{ XGUI.vnc_dependencies }}'

- name: copy required files to remote host
  copy:
    src: '{{ item.FROM }}'
    dest: '{{ item.TO }}'
  with_items: '{{ XGUI.files_to_add }}'

- name: 'custom configuration templated out'
  template:
    src: 'config.custom.j2'
    dest: '/etc/vnc/config.custom'

- name: install the package for vncserver if CentOS 5
  package:
    name: '{{ item }}'
    state: present
    disable_gpg_check: yes
  with_items: '{{ XGUI.packages }}'
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version == '5')

- name: install the package for vncserver if CentOS
  action: >
    {{ ansible_pkg_mgr }} name={{ item }} state=present {{ XGUI.extra_args }}
  with_items: '{{ XGUI.packages }}'
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version > '5')

- name: install the package for vncserver if Ubuntu
  action: >
    {{ ansible_pkg_mgr }} deb={{ item }} state=present {{ XGUI.extra_args }}
  with_items: '{{ XGUI.packages }}'
  when: ansible_distribution == "Ubuntu"

- name: Copy desktop background to instance
  copy:
    src: "{{ background_img }}"
    dest: /usr/share/backgrounds/cloud_background.jpg

- name: Change desktop background on CentOS
  become: yes
  become_user: "{{ ATMOUSERNAME }}"
  command: >
    gconftool-2 -s -t string /desktop/gnome/background/picture_filename "/usr/share/backgrounds/cloud_background.jpg"
  when: ansible_distribution == "CentOS"

- name: Change desktop background on Ubuntu
  copy:
    src: /usr/share/backgrounds/cloud_background.jpg
    dest: /usr/share/backgrounds/default.jpg
    remote_src: True
  when: ansible_distribution == "Ubuntu"

- name: remove locks and un-needed files
  shell: >
    /bin/rm -rf '{{ item.PATH }}'
  with_items: '{{ XGUI.files_to_remove }}'

# NOTE template xstartup for centos 7 was in jetstream ONLY and should be evaluated
- name: template xstartup for vncserver for centos 7
  template:
    src: xstartup-cent7.j2
    dest: "/home/{{ ATMOUSERNAME }}/.vnc/xstartup"
    mode: 0755
    owner: "{{ ATMOUSERNAME }}"
  when: (ansible_distribution == "CentOS") and (ansible_distribution_major_version == '7')
  tags: vnc

- name: ensure correct permissions
  file:
    path: /etc/X11/xinit/xinitrc
    mode: 0755

- name: template xstartup for vncserver
  template:
    src: xstartup.j2
    dest: "/home/{{ ATMOUSERNAME }}/.vnc/xstartup"
    mode: 0755
    owner: '{{ ATMOUSERNAME }}'
  tags: vnc

- name: kill all running vncserver sessions
  shell: >
    /bin/su '{{ ATMOUSERNAME }}' -c "/usr/bin/vncserver -kill :'{{ item }}'"
  with_items: [1, 2, 3, 4, 5, 6, 7, 8]
  failed_when: False

- name: Run VNC commands (Add license, set password, start server)
  command: '{{ item }}'
  with_items: '{{ VNC_COMMANDS }}'
  failed_when: False

- name: set environment variables for legacy systems
  set_fact: ansible_python_interpreter=/usr/bin/python26
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version < '6'
